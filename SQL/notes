* Data Model
A data model is a notation for describing data or information. The description generally consists of three parts:
1. Structure of the data:
	data structures used to implement data in the computer(physical data model)
2. Operations on the data:
	limited set of queries and modifications
3. Constraints on the data:
	way to describe limitations on what the data can be. These constraints often come from the real-world application requirements.

* relation = table
  schema = the definition(like the category names on the first row)
  tuple/records = rows in the table
  
  since schema is fixed and records can be modified/added, we refer to schema as the intension of the table, and records as the extension of the table, also called extent.
  cardinality = number of rows in the table

 * foreign key
 	An idea used when connecting two tables. 
	There can be a key in both table1 and table2, saying table1.key is a foreign key that references table2.key. If the DBMS enforces this constraint, we have referential integrity.
	foreign key must always reference a primary key.

* SQL - Structured Query Language
	separated into 
		DDL - data definition language
		DML - data manipulation language, based on relational calculus

		DDL: CREATE, ALTER, DROP
		DML: SELECT, INSERT, UPDATE, DELETE

* the principal form of a single-relation query:
	SELECT	desired attributes
	FROM	one table(relation)
	WHERE	condition about tuples of the table
	example:
		SELECT Number AS Acc_Num, Owner
		FROM Accounts
		WHERE Type = "savings";

	# selects the rows with Type = "savings" in table "Accounts", and display the Number and Owner columns, but with Number renamed as Acc_Num

* Store the results of a query(with INTO keyword):
	example:
		SELECT Owner INTO temp3
		FROM Account
		WHERE Types = "savings"

* use LIKE keyword:
	example:
		SELECT name
		FROM Customers
		WHERE phone LIKE '%555-____';

* select everything and ORDER BY:
	example:
		SELECT *
		FROM Account
		WHERE name LIKE 'J%'
		ORDER BY Balance		# ascending by default, add DESC if you want

* Multi-Relation Query:
	example:
		SELECT	A.Owner, A.Balance
		FROM	Account A, Deposit D
		WHERE	D.AcctNo = A.Number and A.Balance > 1000;

* Three-Valued logic:
	TRUE = 1, FALSE = 0, UNKNOWN = 1/2
	AND = MIN, OR = MAX, NOT(x) = 1 - x
