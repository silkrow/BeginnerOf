* EFLAGS: 32 bit register
SF - sign flag: negative result in 2's complement
ZF - zero flag
CF - carry flag
OF - overflow flag: 2's complement overflow
PF - parity flag(even number of 1's)

* Instructions that set flags...
	- some of them. 
	- use CMP or TEST to set flags
		example
			CMPL	%EAX, %EBX # flags <- (EBX - EAX)
			TESTL	%EAX, %EBX # flags <- (EBX AND EAX)

* control flow
	example 1 
		010 - 000 = 010, the flags (CF, OF, SF) = (0, 0, 0)
	example 2
		010 - 110 = 100, the flags (CF, OF, SF) = (1, 1, 1)
	example 3
		010 - 111 = 011, the flags (CF, OF, SF) = (1, 0, 0)
	example 4
		110 - 000 = 110, the flags (CF, OF, SF) = (0, 0, 1)
	example 5
		110 - 011 = 011, the flags (CF, OF, SF) = (0, 1, 0)
	example 6
		110 - 111 = 111, the flags (CF, OF, SF) = (1, 0, 1)

	view the equations above as EDX - ESI, in the instruction
			CMPL	%EDX, %ESI # flags <- (EDX - ESI)
	Draw the result of flags in a kmap, with 0/1 corresponding to EDX>ESI/EDX<ESI
		by the kmap, the result is SF xor OF
* branch mnemonics
	- unsigned cmp: "above" and "below"
	- signed cmp: "less" and "greater"
	examples: 
		jne, jb, jbe, jg ... (jne applies to both signed and unsigned)
	example of branch:
		CMPL	%ESI, %EDX
		JL	EDX_SMALL	# if EDX<ESI in signed case, jump to the label

	- some others:
		jo - jump on overflow
		jp - jump on parity
		js - jump on sign
		jmp - unconditional

* subroutine call and return 
	3 example:
		CALL printf	# printf is a label, (push EIP, for the return address on the stack), then EIP <- printf
		CALL *%EAX	# (push EIP), EIP <- EAX
		CALL *(%EAX)	# (push EIP), EIP <- M[EAX]
				\____ Displacement format

* stack operations
	push and pop are supported directly. 
	example:
		PUSHL	%EAX	# M[ESP - 4] <- EAX, ESP <- ESP - 4
		POPL	%EBP	# EBP <- M[ESP], ESP <- ESP + 4
		PUSHFL			# M[ESP - 4] <- EFLAGS, ESP <- ESP - 4
		POPFL			# EFLAGS <- M[ESP], ESP <- ESP + 4

* Data Size Conversion
	- idea: extend 8-bit or 16-bit values to 16-bit or 32-bit values.
	general form to do this: 
			MOV___
			   || \___"to" type (L or W)
			   ||_____"from" type (W or B)
			   \_______signed(S) or zero(Z)

		example:
			MOVSBL	%AH, %ECX	# ECX <- sign extended to 32-bit (AH)
			MOVZWL	4%(EBP), %EAX	# EAX <- zero extended to 32-bit (M[EBP+4])

* Assembler Conventions:
	label:	# requires a colon, and is case-sensitive
			# single line
	C-style:
	/*
	*/
	.string	"hello world", "hi"	# NUL terminated(two strings here)
	.word	# 16-bit values
	.byte	# 100, 0x30, ...
	.long
	.quad
	.single
	.double

	.S file: go through C's preprocessor

	code example:
		1. given: EBX pointing to an array of structures, with ECX elements in  array.
		2. the structure: char* name + long age.
		3. find: min and max age in array.

		use these registers:
			ESI - index into array
			EAX - current age
			EDX - min age seen
			EDI - max age seen

# x86 is little endian:
	in memory, a 32-bit integer 0A0B0C0D is stored as 
		a:		0D
		a+1:	0C
		a+2:	0B
		a+3:	0A
	The key is that little endian starts the storage with the least significant byte.

* initialize registers before usage:
		example:
			xorl	%EAX, %EAX

* x86 grows its stack DOWN(from higher address to lower address):
	that's basically why "esp - 4" is frequently seen when making space in the stack.

* An example:
		ANDL	$0, %ESI
		MOVL	$0x7FFFFFFF, %EDX	# init
		MOVL	$-1, %EDI

		CMPL	%ESI, %ECX			# ECX <= ESI
		JLE		DONE

		# read age into EAX
		MOVL	4(%EBX, %ESI, 8), %EAX
		CMPL	%EAX, %EDI			# EDI >= EAX
		JGE		NOT_MAX
		MOVL	%EAX, %EDI

NOT_MAX:
		CMPL	%EAX, %EDX			# EDX <= EAX
		JLE		NOT_MIN
		MOVL	%EAX, %EDX

NOT_MIN:
		ADDL	$1, %ESI
		JMP		LOOP
		
* calling convention:
	calling convention specifies interface to a subroutine.
	- how does information go in?
	- how does information come out?
	- who owns registers?
	parameters for subroutines.
	- pushed onto stack.
	- from right to left in C.
	subroutine return values.
	- EAX for up ro 32 bits.
	- EDX: EAX for up to 64 bits.
	register ownership.
	- return values can be clobbbered.
	- caller-saved: subroutine free to clobber.
		ECX, EFLAGS
	- callee-saved: EBX, ESI, EDI
		also stack structure: EBP, ESP.
	call sequence
	- 0. save caller-saved registers
	- 1. push arges onto stack
	- 2. make the call
	- 3. pop args off stack
	- 4. restore caller-saved registers
	callee sequence
	- 0. save old base pointer, get a new one
	- 1. save callee-saved registers
	- 2. make space for local vars
	- 3. do the function body
	- 4. tear down stack frame
	- 5. restore callee-saved regs
	- 6. load old base pointer
	- 7. return

* An example of C code to assembly:
		C:
			void find_min_max(person* group, long n_people, min_max* mm){
				
			}

		x86:
			# create stack frame
			PUSHL	%EBP
			MOVL	%ESP, % EBP
			PUSHL	%EBX
			PUSHL	%ESI
			PUSHL	%EDI
			
			# link to input interface
			MOVL	8(%EBP), %EBX		# group	
			MOVL	12(%EBP), %ECX		# n_people

			MOVL	16(%EBP), %EBX		# mm
			MOVL	%EDX, 0(%EBX)		# mm -> min
			MOVL	%EDX, 4(%EBX)		# mm -> max
			
			POPL	%EDI
			POPL	%ESI
			POPL	%EBX

			LEAVE
			RET

* multiply and divide
		MULL	%EBX		# unsigned
							# EDX: EAX <- EAX*EDX
		IMULL	%EBX		# signed
		IMULL	%ECX, %EBX	# signed EBX <- EBX*ECX
-------------------------------- figure this out!


