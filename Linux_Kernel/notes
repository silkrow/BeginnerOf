* Various Unix-like systems on the market:
	- All commerciail variants were derived from either SVR4 or 4.4BSD.
	- All tend to agree on some common standards like IEEE's Portable Operating Systems based on Unix(POSIX) and X/Open's Common Applications Environment(CAE).

* Linux vs. Unix kernels:
	- Monolithic kernel: 
		Linux + most commercial Unix variants.
		However Mac OS X and GNU Hurd are microkernel.
	- Compiled and statically linked traditional Unix kernels:
		Most modern kernels can DYNAMICALLY load and unload some portions of the kernel code(typically, device drivers). 
		Linux's support for modules: 
			allows to automatically load and unload modules on demand. 
	- Kernel threading:
		Linux uses kernel threads in a very limited way to execute a few functions periodically. 
	- Multithreaded application support:
		- Most modern operating systems have some kind of support for multithreaded applications.
		- Multithreaded user applications: 
			"user programs that are designed in terms of many relatively independent execution flows that share a large portion of the application data structures. Be composed of many lightweight processes(LWP)"
			- LWP:
				"processes that can operate on a common address space, common physical memory pages, common opened files..." 
				- Other commercial Unix variants of LWP are based on kernel threads.
				- Linux regards LWP as the basic execution context and handles them via the nonstandard clone() system call. 
	- Preemptive kernel:
		"When compiled with the Preemptible Kernel option, Linux 2.6 can arbitrarily interleave execution flows while they are in privileged mode."
		Linux has Preemptible Kernel option starting from 2.6
	- Multiprocessor support:
		Linux 2.6 supports symmetric mutiprocessing(SMP) for different memory models.

* Multiuser Systems:
	"A computer that is able to concurrently + independently execute several applications belonging to two or more users."
	- Applications can be active AT THE SAME TIME and contend for the various resources such as CPU, memory, hard disks...
	- Each application can perform its task with no concern for what others are doing.
	- Users and Groups: 
		- All users are identified by a unique number called User ID or UID.
		- Each user is a member of one or more user groups, which are identified by a unique number called a user group ID. Each file is associated with exactly one group. 
		- root/superuser:
			"Any Unix-like" OS has a special user called root or superuser. The root user can access every file on the system and can manipulate every running user program. 

* Process:
	"An instance of a program in execution. Processes are often called tasks or threads in the Linux source code. It can be imagined as the collection of data structures that fully describes how far the execution of the program has progressed."
	- Thread: 
		"Represents an execution flow of the process, they are independent, but share a large portion of the application data structures."
	- Linux uses lightweight processes to offer better support for multithreaded applications. Two lightweight processes may share some resources.
	- Multithreaded Application:
		A straightforward way to implement multithreaded applications is to associate a lightweight process with each thread. ---> the threads can access the same set of application data structures ++++++ each thread can be scheduled independently by the kernel so that one may sleep while another remains runnable.
	- Process Descriptor(PD for short):
		"A task_structure type structure with fields containing all the info related to a single process."
		including the following - fields.
		- state:
			an array; flags mutually exclusive
		- thread_info
		- mm
		- tty
		- parent
		- real_parent
		- fs
		- thread
		- files
		- pid
		...
	- To identify a process:
		1. PID:
			numbered sequentially; stored in the process descriptor; when upper limit is reached(32767 by default), the lower unused PIDs will be recycled; distinguishable for process(including lightweight); threads in the same group have common PID ==> thread group
		2. By distinct Process Descriptor:
			even lightweight processes have their own PD; each process has a 32-bit PD pointer which points to its task_struct(which is PD).
	- Thread group:
		- threads with a common PID.
		- a thread group leader(first lightweight process in the group) has its PID = tgid 
		- tgid: a field in PD, returned when getpid() is called, thus make sure all threads be led are seemed to share a single PID which is the leader's.
	- Memory Storage:
		- PD's are stored in dynamic memory rather than in the memory area permanently assigned to the kernel(instead use the thread_info below to link to PD from the memory area for each process).
		- Each process ____thread_info data structure 
					\______Kernel Mode process stack
			The two data structures above are stored together, 8192 bytes in total. 
			thread_info links to PD which is at somewhere else(but still it should be kernel space, not necessarily permanent).
			visualize the 2 page frames:

			0x015fbfff	|-------------------|
						| _________________	|
						| |		Stack	  |	|
						| |				  |	|
			0x015fb000	| |				  |	|
						|         .			|
						|		  .			|
						|		  .			|
				esp --> | |_______________|	|
						|					|
						|					|
			0x015fa034	|  _______________	| 
						| |	52 bytes fixed|	|
						| |	thread_info	--|-|--> PD
						| |_______________|	|
			0x015fa000	|-------------------|
			the structure above provides a convenient way for the kernel to identify process since it can use the esp register and erase lower bits to get to thread_info structure.
		- process list:
			"A doubly linked list that links together all existing PD's"
		- runqueue:
			- Early Linux put all runnable processes in the same list called runqueue.
			- 2.6 splits the runqueue in many lists of runnable processes, by process priority(an int in 0-139).
	- Relationships:
		fields in PD(given a process P):
			- real_parent: 
				"Points to the PD that created P, or to process 1 if parent of P no longer exists."
			- parent:
				"Points to the current parent of P. This is the process that must be signaled when P terminates. It maybe different with real_parent when another process issues a ptrace() syscall requesting that it be allowed to monitor P."
			- children:
				"The head of list containing all children created by P."
			- sibling:
				"Pointers to the next and prev elements in the list of the sibling processes."
	- Process Resource Limits:
		"Specify the amount of system resources it can use." Stored in a field called rlimit in the PD.
	- Process Switch:
		1. hardware context: 
			- Things in registers must be stored/pre-loaded during the switch, the set of data that must be loaded into the registers before process resumes is called "hardware context". In Linux, a part of the hardware context is stored in the PD, while the remaining is saved in the Kernel Mode stack.
			- Old versions use hardware support to do hardware context switch... Linux 2.6 uses software to perform a process switch... The 2 ways take about the same amount of time.
			- Don't worry about registers for User Mode, they are stored already in Kernel Mode stack before performing the process switch.
		2. Task State Segment(TSS):
			- 80x86 architecture includes a specific segment type called the Task State Segment(TSS), to store hardware contexts.
			- Linux doesnt's use hardware to perform the hardware context switch, but it forces each CPU to have a TSS.
			- Check ULK3 p104 for details about Task State Segment.
		3. Steps of process switch:
			1) Switch the Page Global Directory to install a new address space
			2) Switch the Kernel Mode stack and the hardware context
	- Create Processes:
		Modern speed ups:
			- COW
			- lightweight process: 
				allow both the parent and the child to share many per-process kernel data structures.
			- vfork() syscall:
				creates a process that shares the memory address space of its parent, the parent's execution is blocked until the child exits or executes a new program.	
		syscalls:
			- clone():
				- Creates a lightweight process.
				- It actually sets up the stack of the new lightweight process and then invokes the clone() system call. So clone() called by application is but a wrapper function in C library.
			- fork():
				- a clone() syscall whose flags parameter specifies both a SIGCHLD signal and all the clone flags cleared, and whose child_stack parameter is the current parent stack pointer.
				- the parent and child temporarily share the same User Mode stack.
			- vfork():
				- a clone syscall whose flags parameter specifies both a SIGCHLD signal and the flags CLONE_VM and CLONE_VFORK, and whose child_stack parameter is the current parent stack pointer.
			---
			wrap up:
			clone() ___ a function with many paras and flags 
				\___ in fact a wrapper function in C lib, sets up the stack of the new lightweight handle some paras and triggers clone() syscall. 
			fork() ___ clone() syscall with SIGCHLD signal and no flags
			vfork() ___ clone() syscall with SIGCHLD signal and flag CLONE_VM | CLONE_VFORK
												\___ Let User Mode sp to be assigned to the esp of the child process(parent and child temporarily share the same User Mode stack)
		- visualize:
			|-----------------------|
			| clone() in C library	|
			|-----------------------|-----------|-----------------------------------|
			|		clone()			| + SIGCHLD	| + SIGCHLD + CLONE_VM|CLONE_VFORK  |
			|						| = fork()	| = vfork()							|
			|-----------------------|-----------|-----------------------------------|
							|								|
			 				|			do_fork()			|
							|-------------------------------|
							|			copy_process()		|
							|-------------------------------|
	- Kernel Threads:
		- example usages: 
			- flushing disk caches
			- swapping out unused pages
			- servicing network connections
		- scheduled in the background
		- run in Kernel Mode only(different with regular processes that can run in both modes)
		- use only linear addresses greater than PAGE_OFFSET(cause only runs in Kernel Mode.)
	- Process 0:
		"The ancestor of all processes."
		- the idle process / the swapper process.
		- a kernel thread created from scratch during the initialization phase of Linux.
		- after creating init process(process 1), process 0 executes the cpu_idle() function. 
		- it will be selected by the scheduler only when there're no other processes in the TASK_RUNNING state.
		- a multiprocessor system has a process 0 for each CPU.
	- Process 1:
		"A kernel thread created by process 0 that executes the init() function, completes the initialization of the kernel."
		- the init process.
	- Some other kernel threads:
		- keventd: executes the functions in the keventd_wq workqueue.
		- kapmd: handles the events related to the Advanced Power Management.
		- kswapd: reclaims memory.
		- pdflush: flushes "dirty" buffers to disk to reclaim memory.
		- kblockd: executes the functions in the kblockd_workqueue.
		- ksoftirqd: runs the tasklets.
	- Destroying Processes:
		- The usual way to do that is to invoke the exit() library function.
		- exit() can be inserted by programmer explicitly, and it's also called in the end of main() by C compiler. 
		- exit():
			1. releases the resources allocated by the C library;
			2. executes each function registered by the programmer;
			3. invokes a syscall that evicts the process from the system;
		- To terminate a User Mode application:
			|\__ exit_group() syscall
			\___ _exit() syscall
			exit_group():
				Terminates a full thread group, the main kernel function that implements this syscall is called do_group_exit(). The exit_group() should be invoked by the exit() C library function.
			_exit():
				Terminates a single process, regardless of any other process in the thread group of the victim. The main kernel function that implements this system call is called do_exit(). This is the system call invoked, for instance, by the pthread_exit() function of the LinuxThreads library.

* Interrupts & Exceptions:
	- synchronous and asynchronous:
		|				\__ generated by other hardware devices
		\__ interrupts are produced by the CPU while executing instructions(so instruction can finish safely)
		- Intel microprocessor manuals designate synchronous and asynchronous as exceptions and interrupts, respectively...... 
			so		synchronous interrupt = exception
					asynchronous interrupt = interrupt
	
	kernel control path: the sequence of instructions executed by the kernel to handle a system call, an exception, or an interrupt.
	- Constraints of Interrupts:
		- Kernel should finish handling interrupt as quick as possible, so it divides that into:
			- a critical urgent part that the kernel executes right away.
			- a deferrable part that is left for later.
		- In case of many interrupts incoming, the interrupt handler must be coded so that the kernel control paths can be executed in a nested manner.
		- Some interrupts may need the handler to disable receiving interrupts when handling, but it should be limited as much as possible.
	- Intel classifies interrupts and exceptions as:
		1. Maskable interrupts: 
			"Interrupts that can be in two states, masked or unmasked. A masked interrupt is ignored by the control unit as long as it remains masked."
			- All Interrupt Requests(IRQs) issued by I/O devices give rise to maskable interrupts.
		2. Nonmaskable interrupts:
			- Only a few critical events (e.g. hardware failures) give rise to nonmaskable interrupts.
			- Always recognized by the CPU.
		3. Processor-detected exceptions:
			"Generated when the CPU detects an anomalous condition while executing an instruction."
			3.1 Faults:
				- Can generally be corrected.
				- Once corrected, program restart without loss of continuity. 
				- eip saved to be the exact instruction that triggered the interrupt(so resuming will make a smooth restart).
			3.2 Traps:
				- Mainly used for debugging purposes(to notify the debugger that a specific instruction has been executed, such as a breakpoint is reached).
				- eip saved to be the next instruction after the one that caused the trap.
			3.3 Aborts:
				- Used when a serious error occurred(e.g. hardware failures or inconsistent values in system tables).
				- The abort exception handler will force the affected process to terminate.
		4. Programmed exceptions:
			"Occur at the request of the programmer"
			- Handled by the control unit as traps. 
			- Often called "software interrupts". 
	Identify:
		Intel use 8-bit unsigned number called "vector" to identify a interrupt or exception.
	IRQ & Interrupts:
		"Each hardware device controller capable of issuing interrupt requests usually has a single output line designated as the Interrupt ReQuest (IRQ) line."	
		- All existing IRQ lines are connected to the input pins of a hardware circuit called the Programmable Interrupt Controller.
		- PIC (Programmable Interrupt Controller) keeps doing the following steps:
			1. PIC monitors the IRQ lines, checking for raised signals. Pick one with lowest pin number if there're more than one signals.
			2. Convert the raised signal received into a corresponding vector.
			3. Store the vector in an Interrupt Controller I/O port (so the CPU can read it via data bus).
			4. Sends a raised signal to the processor INTR pin -- that's actually issuing an interrupt!!!
			5. Waits until the CPU acknowledges the interrupt signal by writing into one of the PIC I/O ports, when this occurs, clears the INTR line. 
		- Visualize IRQ handling process:
			 ___________	 		 	 ___________
			|			|	IRQ			|			| Pick one 
			| hardware1	|-------------->|	PIC		|-----------
			|___________|		     -->|___________|		 	|	
			 ___________			/		 /				  	|
			|			|	IRQ	   /		convert the signal to a corresponding vector
			| hardware2	|---------/			|				  	|
			|___________|					|				  	|
							put vector in Interrupt Controller I/O port (bus to communicate with CPU)
											|				  	|
											|					|
											|		interrupt the processor
											|					|
											|					|
											wait until CPU acknowledges the interrupt 
											|					|
											--------------------|
		- Each IRQ lines can be selectively disabled by the vector associated with it. 
		===> PIC can disable IRQs.
			Disabled interrupts are not lost, the PIC sends them to the CPU as soon as they are enabled again.
		- IRQs disabling vs. masking interrupts:
			- Recall that IRQs sent by I/O devices are ALL maskable. 
			- IF flag of the eflags register decides whether CPU can receive maskable interrupts issued by PIC.
			- The cli and sti assembly language instructions are used to clear and set this IF flag.
		- visualize of IRQ and maskable interrupts:
			 ___________
			/  _____	\
			| /		\	|
			| |IRQ--|---|-----can be disabled selectively.
			| \_____/	|
			|			|
			|maskable	|
			|interrupts-|-----cli and sti to set IF in eflag to diable all.
			\___________/
	- APIC (Advanced Programmable Interrupt Controller):
		- Used for multi-processor systems.
		- Visualize:
				CPU0
			 ___________		|				|		external
			|	_____	|		|				|		IRQs
			|  |local|	|		|				|		   ||
			|  |APIC |	| <---> | 				|		   ||	
			|  |_____|  |		| Interrupt		|		 __\/___
			|___________|		|				|		|		|
								| Controller	|		| I/O	|
								|				| <---> | APIC	|
				CPU1			| Communication	|		|_______|
			 ___________		|				|
			|	_____	|		| bus			|
			|  |local|	|		|				|
			|  |APIC |	| <--->	|				|
			|  |_____|  |		|				|		
			|___________|		|				|
								|				|
	- Exceptions:
		- Check ULK3 p138 for 20 different exceptions that each has one dedicated exception handler given by the kernel. 
		- A copy of the table: Signals sent by the exception handlers
		Vector	| Exception						| Exception hander				| Signal
		----------------------------------------------------------------------------------
		0		| Divide error					| divide_error()				| SIGFPE
		1		| Debug							| debug()						| SIGTRAP
		2		| NMI							| nmi()							| None
		3		| Breakpoint					| int3()						| SIGTRAP
		4		| Overflow						| overflow()					| SIGSEGV
		5		| Bounds check					| bounds()						| SIGSEGV
		6		| Invalid opcode				| invalid_op()					| SIGILL
		7		| Device not available			| device_not_available()		| None
		8		| Double fault					| doublefault_fn()				| None
		9		| Coprocessor segment overrun	| coprocessor_segment_overrun()	| SIGFPE
		10		| Invalid TSS					| invalid_TSS()					| SIGSEGV
		11		| Segment not present			| segment_not_present()			| SIGBUS
		12		| Stack segment fault			| stack_segment()				| SIGBUS
		13		| General protection			| general_protection()			| SIGSEGV
		14		| Page Fault					| page_fault()					| SIGSEGV
		15		| Intel-reserved				| None							| None
		16		| Floating-pointer error		| coprocessor_error()			| SIGFPE
		17		| Alignment check				| alignment_check()				| SIGBUS
		18		| Machine check					| machine_check()				| None
		19		| SMD floating point			| simd_coprocessor_error()		| SIGFPE
		
